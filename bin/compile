#!/usr/bin/env bash

# Usage: bin/compile BUILD_DIR CACHE_DIR ENV_DIR

set -euo pipefail

# Detect requirements and fail if not met.
# Note: we can't do this in bin/detect script
# as we don't have access to env vars there.

build_dir=$1
env_dir=$3

failed=false
for env_var in FRONTEND_BUILDPACK_JS_APP FRONTEND_BUILDPACK_JS_ROUTE FRONTEND_BUILDPACK_RAILS_APP; do
  if [[ -f "${env_dir}/${env_var}" ]]; then
    export ${env_var}="$(cat ${env_dir}/${env_var})"
  else
    echo "FATAL: Please set env var: ${env_var}"
    failed=true
  fi
done

if [ $failed = true ]; then
  exit 1
fi

js_app="${build_dir}/${FRONTEND_BUILDPACK_JS_APP}"
js_route="${FRONTEND_BUILDPACK_JS_ROUTE}"
rails_app="${build_dir}/${FRONTEND_BUILDPACK_RAILS_APP}"

js_app_requirement=$js_app/package.json
if [[ ! -f ${js_app_requirement} ]]; then
  echo "FATAL: Missing expected file: ${js_app_requirement}"
  failed=true
fi

frontend="${rails_app}/frontends/${js_route}"
if [[ -e $frontend ]]; then
  echo "FATAL: Unexpected: $frontend already exists"
  failed=true
fi

static="${rails_app}/public/${js_route}/static"
if [[ -e $static ]]; then
  echo "FATAL: Unexpected: $static already exists"
  failed=true
fi

if [ $failed = true ]; then
  exit 1
fi

# Requirements are met; proceed with main actions:

echo "-----> Installing yarn"
npm install -g yarn

echo "-----> Building JS app"
set -x
cd ${js_app}
yarn install --frozen-lockfile --production
yarn build

set +x
echo "-----> Copying index.html to rails app"
set -x
mkdir -p ${frontend}
cp ${js_app}/build/index.html ${frontend}/

ls ${frontend}/

set +x
echo "-----> Moving static dir to rails public dir"
set -x
mkdir -p ${static}
cp -r ${js_app}/build/static/ ${static}

ls ${static}/
